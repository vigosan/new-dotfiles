#!/bin/bash

# Install Homebrew if not present
if ! command -v brew >/dev/null 2>&1; then
  echo "Installing Homebrew..."
  /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"

  # Add Homebrew to PATH for current session
  if [[ $(uname -m) == "arm64" ]]; then
    # Apple Silicon Macs
    echo 'eval "$(/opt/homebrew/bin/brew shellenv)"' >> ~/.zprofile
    eval "$(/opt/homebrew/bin/brew shellenv)"
  else
    # Intel Macs
    echo 'eval "$(/usr/local/bin/brew shellenv)"' >> ~/.zprofile
    eval "$(/usr/local/bin/brew shellenv)"
  fi

  echo "Homebrew installed successfully!"
else
  echo "Homebrew already installed."
fi

# Update Homebrew
echo "Updating Homebrew..."
brew update

# Install packages from Brewfile
echo "Installing packages from Brewfile..."

# Ensure Homebrew is in PATH
if [[ $(uname -m) == "arm64" ]]; then
  eval "$(/opt/homebrew/bin/brew shellenv)"
else
  eval "$(/usr/local/bin/brew shellenv)"
fi

# Install packages from Brewfile
if [ -f "$HOME/Brewfile" ]; then
  echo "Found Brewfile, installing packages..."
  brew bundle --file="$HOME/Brewfile"
  echo "Package installation completed!"
else
  echo "Brewfile not found at $HOME/Brewfile"
fi

# Configure GitHub CLI and Copilot
if command -v gh >/dev/null 2>&1; then
  echo "Configuring GitHub CLI and Copilot..."

  # Install GitHub Copilot extension if not already installed
  if ! gh extension list | grep -q "github/gh-copilot"; then
    echo "Installing GitHub Copilot CLI extension..."
    gh extension install github/gh-copilot
    echo "GitHub Copilot extension installed!"
  else
    echo "GitHub Copilot extension already installed."
  fi

  # Check if user is authenticated
  if ! gh auth status >/dev/null 2>&1; then
    echo "⚠️  GitHub CLI is not authenticated."
    echo "💡 Please run 'gh auth login' to authenticate and enable Copilot features."
    echo "   This step requires interactive authentication with your GitHub account."
  else
    echo "✅ GitHub CLI is already authenticated."
  fi
else
  echo "GitHub CLI (gh) not found. Install it first with: brew install gh"
fi

# Configure macOS defaults
echo "Setting macOS defaults..."

# Close any open System Preferences panes
osascript -e 'tell application "System Preferences" to quit'

# Configure dock app
echo "Setting dock..."
# Dock icons to 48px
defaults write com.apple.dock "tilesize" -int "48"
# Disable recents in dock
defaults write com.apple.dock "show-recents" -bool "false"
# Enable magnification
defaults write com.apple.dock "magnification" -bool "true"
# Set magnification size to medium (64px)
defaults write com.apple.dock "largesize" -int "64"

if command -v dockutil >/dev/null 2>&1; then
  dockutil --no-restart --remove all
  dockutil --no-restart --add "/System/Applications/Apps.app"
  dockutil --no-restart --add "/Applications/Brave Browser.app"
  dockutil --no-restart --add "/System/Applications/Mail.app"
  dockutil --no-restart --add "/System/Applications/Calendar.app"
  dockutil --no-restart --add "/Applications/iTerm.app"
  dockutil --no-restart --add "/System/Applications/Music.app"
{{- if .work }}
  dockutil --no-restart --add "/Applications/Slack.app"
{{- end }}
  dockutil --no-restart --add "/System/Applications/System Settings.app"
  dockutil --no-restart --add '~/Documents'
  dockutil --no-restart --add '~/Downloads'
fi

## Screen
# Save screenshots to the desktop
defaults write com.apple.screencapture "disable-shadow" -bool "true" # Disable shadow in screenshots
defaults write com.apple.screencapture location -string "${HOME}/Desktop"
# Enable subpixel font rendering on non-Apple LCDs
defaults write NSGlobalDomain AppleFontSmoothing -int 2

## General UI/UX
# Disable auto-correct
defaults write NSGlobalDomain NSAutomaticSpellingCorrectionEnabled -bool false
# Set sidebar icon size to medium
defaults write NSGlobalDomain NSTableViewDefaultSizeMode -int 2

# Trackpad
defaults write com.apple.AppleMultitouchTrackpad "TrackpadThreeFingerDrag" -bool "true" # Drag windows with 3 fingers
defaults write com.apple.driver.AppleBluetoothMultitouch.trackpad Clicking -bool "true" # Tap to click
defaults -currentHost write NSGlobalDomain com.apple.mouse.tapBehavior -int "1" # Tap to click
defaults write NSGlobalDomain com.apple.mouse.tapBehavior -int "1" # Tap to click
defaults write -g com.apple.swipescrolldirection -bool "true" # Enable natural scroll

## Finder
# Finder: show status bar
defaults write com.apple.finder ShowStatusBar -bool true
# Keep folders on top when sorting by name
defaults write com.apple.finder _FXSortFoldersFirst -bool true
# When performing a search, search the current folder by default
defaults write com.apple.finder FXDefaultSearchScope -string "SCcf"
# Disable the warning when changing a file extension
defaults write com.apple.finder FXEnableExtensionChangeWarning -bool false
# Avoid creating .DS_Store files on network or USB volumes
defaults write com.apple.desktopservices DSDontWriteNetworkStores -bool true
defaults write com.apple.desktopservices DSDontWriteUSBStores -bool true
# Disable the warning before emptying the Trash
defaults write com.apple.finder WarnOnEmptyTrash -bool false
# New Finder windows show home directory
defaults write com.apple.finder NewWindowTargetPath -string "file://{{ .chezmoi.homeDir }}/"

# Restart affected applications
echo "Restarting affected applications..."
for app in "Dock" "Finder" "SystemUIServer"; do
  killall "${app}" &> /dev/null
done

echo "macOS configuration completed!"
